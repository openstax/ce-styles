@function empty_wrapper($name, $selector) {
    @return (
        _name: "#{$name}Wrapper",
        _subselector: $selector,
        _properties: ()
    );
}

// This function counts width and margins for bottom border of the title
// depends on width of the title in px rounded to one decimal place
@function titleBottomBorder($name, $titleWidth) {
    $fullTitleWidth: $titleWidth + 8 ; // Width of title with 8px white space
    $borderMargin: ($fullTitleWidth / 12) * 1rem; // 12 - default px size
    $borderWidth: (6.5 - $fullTitleWidth / 96) * 1in; // 1in = 96px

    @return (
      _name: "#{$name}TitleBottomBorder",
      _subselector: '::after',
      _properties: (
        content: "''",
        width: $borderWidth,
        border-bottom-width: 0.2rem,
        border-bottom-color: enum('ValueSet:::REQUIRED'),
        border-bottom-style: solid,
        margin-left: $borderMargin,
        position: absolute, 
        bottom: 0,
        display: inline-block,
      )
    );
}

// By this function you can create components for problem and solution container from exercises.
// When image is the first child of problem/solution container then it has class .has-first-element and some additional properties
// must be added to style this element correctly.
// 
@function exerciseChildContainer($childSpecs) {
  $child: map-get($childSpecs, child);
  $name: map-get($childSpecs, name);
  $hasImageOnTop: map-get($childSpecs, hasImageOnTop);

  @if $hasImageOnTop == true {
    @return (
      _name: #{$name},
      _subselector: ' .os-#{$child}-container.has-first-element',
      _properties:(
          display: table-cell,
          vertical-align: bottom,
          padding-top: half-v-grid(1),
          width: 100%,
      ),
    );
  } @else {
    @return (
      _name: #{$name},
      _subselector: ' .os-#{$child}-container',
      _properties:(
          display: table-cell,
          width: 100%,
      ),
    );
  }
}
