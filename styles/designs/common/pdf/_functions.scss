@function empty_wrapper($name, $selector) {
    @return (
        _name: "#{$name}Wrapper",
        _subselector: $selector,
        _properties: ()
    );
}

// This function counts width and margins for bottom border of the title
// depends on width of the title in px rounded to one decimal place
@function titleBottomBorder($name, $titleWidth) {
    $fullTitleWidth: $titleWidth + 8 ; // Width of title with 8px white space
    $borderMargin: ($fullTitleWidth / 12) * 1rem; // 12 - default px size
    $borderWidth: (6.5 - $fullTitleWidth / 96) * 1in; // 1in = 96px

    @return (
      _name: "#{$name}TitleBottomBorder",
      _subselector: '::after',
      _properties: (
        content: "''",
        width: $borderWidth,
        border-bottom-width: 0.2rem,
        border-bottom-color: enum('ValueSet:::REQUIRED'),
        border-bottom-style: solid,
        margin-left: $borderMargin,
        position: absolute, 
        bottom: 0,
        display: inline-block,
      )
    );
}

//ToC functions
@function tocLinkPage($kind) {
  @return (
    _name: "#{$kind}LinkPage",
    _subselector: '::after',
    _properties: (
      content: enum('ValueSet:::REQUIRED'), // This property value has been changed to REQUIRED and set in toc-settings.scss file, so it can be overwrite in pl-u-physics book.scss file to implement changes in the toc design just for this book
      display: enum('ValueSet:::REQUIRED'), // This property valuee has been changed to REQUIRED and set in toc-settings.scss file, so it can be overwrite in pl-u-physics book.scss file to implement changes in the toc design just for this book
      margin-left: enum('ValueSet:::REQUIRED'),  // This property value has been changed to REQUIRED and set in toc-settings.scss file, so it can be overwrite in pl-u-physics book.scss file to implement changes in the toc design just for this book
      font-family: enum('ValueSet:::REQUIRED'),
      font-size: enum('ValueSet:::REQUIRED'),
      line-height: enum('ValueSet:::REQUIRED'),
      font-weight: enum('ValueSet:::OPTIONAL'),
      color: enum('ValueSet:::OPTIONAL')
    )
  );
}

@function tocLink($kind) {
  @return (
    _name: "#{$kind}Link",
    _subselector: '> a',
    _properties: (
      font-family: enum('ValueSet:::REQUIRED'),
      font-size: enum('ValueSet:::REQUIRED'),
      line-height: enum('ValueSet:::REQUIRED'),
      font-weight: enum('ValueSet:::OPTIONAL'),
      color: (enum('ValueSet:::OPTIONAL'), #000000),
      text-decoration: none
    ),
  );
}

@function topLevelPageNotAppendixProperties() {
  @return (
    display: block,
    margin-bottom: v-spacing(2)
  );
}
// By this function you can create components for problem and solution container from exercises.
// When image is the first child of problem/solution container then it has class .has-first-element and some additional properties
// must be added to style this element correctly.
// Used in exercises and answer key.
@function exerciseChildContainer($childSpecs) {
  $child: map-get($childSpecs, child);
  $name: map-get($childSpecs, name);
  $hasImageOnTop: map-get($childSpecs, hasImageOnTop);

  @if $hasImageOnTop == true {
    @return (
      _name: #{$name},
      _subselector: ' .os-#{$child}-container.has-first-element',
      _properties:(
          display: table-cell,
          vertical-align: bottom,
          padding-top: v-spacing(1),
          width: 100%,
      ),
    );
  } @else {
    @return (
      _name: #{$name},
      _subselector: ' .os-#{$child}-container',
      _properties:(
          display: table-cell,
          width: 100%,
      ),
    );
  }
}

//Function used in Chapter Intro to create Splash Image Background Component
@function fullWidthBg($kind, $color) {
  @return (
      _name: "#{$kind}Bg",
      _subselector: '::before',
      _properties: (
          content: "''",
          background-color: $color,
          position: absolute,
          height: 100%,
          width: enum('ValueSet:::REQUIRED'),
          margin-left: enum('ValueSet:::REQUIRED'),
          z-index: -1,
          box-sizing: border-box,
          padding: inherit,
          top: 0,
      ),
  );
}
