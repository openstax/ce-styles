$IS_FRAMEWORK_IMPORTED: false;
$IS_TEST: true;
$DEBUG: true;

@import "true";
@import "framework";

@include debug_enums();

@include describe('Framework') {
  @include it('is successfully imported') {
    @include assert-true($IS_FRAMEWORK_IMPORTED);
  }
}


@include describe('Errors') {
  @include it('can error in a mixin') {
    @include assert {
      @include output {
        @include error("Explode.")
      } @include expect {
        ERROR: "Explode.";
      }
    }
  }

  @include it('can error in a function') {
    @include assert {
      @include output {
        test: error("Explode.");
      } @include expect {
        test: "ERROR: Explode.";
      }
    }
  }
}


@include describe('Enum Utility') {
  @include it('allows enum creation') {
    @include create_enum_type('Test',
        'TEST',
        'ENUM'
    );
    @include assert-equal(
      'ENUM__Test:::TEST',
      enum('Test:::TEST')
    );
    @include assert-equal(
      'ENUM__Test:::ENUM',
      enum('Test:::ENUM')
    );
  }

  @include it('errors when getting a non-existent enum') {
    @include assert-equal(
      enum('Null:::NULL'),
      "ERROR: Enum `Null:::NULL` does not exist."
    );
  }
}


@include describe('Settings') {

  @include it('settings get functions error on non-existent key') {
    @include assert-equal(
      settings(non-existent-setting),
      "ERROR: Unknown setting `non-existent-setting`."
    );
    @include assert-equal(
      settings_not_null(non-existent-setting),
      "ERROR: Unknown setting `non-existent-setting`."
    );
  }

  @include it('settings get functions can use default values') {
    @include assert-equal(
      settings(non-existent-setting, "default-value"),
      "default-value"
    );
    @include assert-equal(
      settings_not_null(non-existent-setting, "default-value"),
      "default-value"
    );
  }

  @include it('settings_not_null function errors on null values') {
    @include assert-equal(
      settings_not_null(non-existent-setting, null),
      "ERROR: Received a disallowed NULL value for setting `non-existent-setting`."
    );
  }
}


@include describe('ValueSet Enum Type') {
  @include it('provides values NULLABLE and NOT_NULL') {
    @include assert-equal(
      enum('ValueSet:::NULLABLE'),
      'ENUM__ValueSet:::NULLABLE'
    );
    @include assert-equal(
      enum('ValueSet:::NOT_NULL'),
      'ENUM__ValueSet:::NOT_NULL'
    );
  }
}


@include describe('Argument Enum Type') {
  @include it('provides value NONE') {
    @include assert-equal(
      enum('Argument:::NONE'),
      'ENUM__Argument:::NONE'
    )
  }
}


@include describe('The null Function') {
  @include it('returns null') {
    @include assert-equal(
      null(),
      null
    );
  }
}


@include describe('The map-key-prefix-flatten Function') {  
  @include it('flattens map leaf entry with namespace of parent keys') {
    @include assert-equal(
      map-key-prefix-flatten(
        (
          rootkey: (
            key: (
              childkey: value
            )
          )
        )
      ),
      ('rootkey:::key:::childkey': value)
    );
  }

  @include it('can unwrap multiple keys on multiple levels') {
    @include assert-equal(
      map-key-prefix-flatten(
        (
          rootkey: (
            key: (
              childkey: value,
              childkey2: value2
            ),
            key2: (
              childkey: value3,
              childkey2: value4
            )
          )
        )
      ),
      (
        'rootkey:::key:::childkey': value,
        'rootkey:::key:::childkey2': value2,
        'rootkey:::key2:::childkey': value3,
        'rootkey:::key2:::childkey2': value4
      )
    );
  }
}
