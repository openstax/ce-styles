$IS_FRAMEWORK_IMPORTED: false;
$IS_TEST: true;
$DEBUG: true;

@import "true";
@import "framework";

@include describe('Framework') {
  @include it('is successfully imported') {
    @include assert-true($IS_FRAMEWORK_IMPORTED);
  }
}


@include describe('Errors') {
  @include it('can error in a mixin') {
    @include assert {
      @include output {
        @include error("Explode.")
      } @include expect {
        ERROR: "Explode.";
      }
    }
  }

  @include it('can error in a function') {
    @include assert-equal(
      error(enum('Error:::INDEX_ERROR'), "Explode."),
      (
        error: (
          type: "ENUM__Error:::INDEX_ERROR",
          message: "Explode."
        )
      )
    )
  }

  @include it('can identify an error object') {
    @include assert-true(
      is_error(error(enum('Error:::TYPE_ERROR'), "Boom."))
    );
  }

  @include it('can identify type and message of an error') {
    $error: error(enum('Error:::INDEX_ERROR'), "Out of Bounds");
    @include assert-equal(
      error_type($error),
      enum('Error:::INDEX_ERROR')
    );
    @include assert-equal(
      error_message($error),
      "Out of Bounds"
    );
  }
}


@include describe('Enum Utility') {
  @include it('allows enum creation') {
    @include scoped_create_enum_type('Test',
        'TEST',
        'ENUM'
    ) {
      @include assert-equal(
        enum('Test:::TEST'),
        'ENUM__Test:::TEST'        
      );
      @include assert-equal(
        enum('Test:::ENUM'),
        'ENUM__Test:::ENUM'
      );
    }
  }

  @include it('errors when getting a non-existent enum') {
    @include assert-true(
      is_error(enum('Null:::NULL'))
    );
  }
}


@function test_add_settings_function() {
  @return (my-setting: test-value);
}

@function test_add_other_settings_function() {
  @return (my-other-setting: other-test-value);
}

@function test_add_settings_function_after() {
  @return (my-setting: overriden-value);
}

@function test_settings_key_prefix_flatten() {
  @return (
    rootkey: (
      key: (
        childkey: my-prefixed-value
      )
    )
  );
}

@include describe('Settings') {
  @include it('can be added via map-returning functions') {
    @include scoped_add_settings_functions(get-function('test_add_settings_function')) {
      @include assert-equal(
        settings(my-setting),
        'test-value'
      );
    }
  }

  @include it('can add settings functions only to a certain scope if desired') {
    @include scoped_add_settings_functions(
      get-function('test_add_settings_function')
    ) {}
    @include assert-unequal(
      settings(my-setting),
      'test-value'
    );
  }

  @include it('can access the settings with keys flattened') {
    @include scoped_add_settings_functions(
      get-function('test_settings_key_prefix_flatten')
    ) {
      @include assert-equal(
        settings('rootkey:::key:::childkey'),
        'my-prefixed-value'
      )
    }
  }

  @include it('can clear and output unused settings values') {
    $_: settings(my-setting);
    @include clear_used_settings();
    @include scoped_add_settings_functions(
      get-function('test_add_other_settings_function'),
      get-function('test_add_settings_function')
    ) {
      $_: settings(my-other-setting);
      @include assert-equal(
        get_unused_settings(),
        ((my-setting, test-value),)
      );
    }
  }

  @include it('prioritize settings functions added later (front of manifest)') {
    @include scoped_add_settings_functions(get-function('test_add_settings_function')) {
      @include scoped_add_settings_functions(get-function('test_add_settings_function_after')) {
        @include assert-equal(
          settings(my-setting),
          'overriden-value'
        );
      }
    }
    @include scoped_add_settings_functions(
      get-function('test_add_settings_function_after'),
      get-function('test_add_settings_function')
    ) {
      @include assert-equal(
        settings(my-setting),
        'overriden-value'
      );
    }
  }

  @include it('get functions error on non-existent key') {
    @include assert-true(
      is_error(settings(non-existent-setting))
    );
    @include assert-true(
      is_error(settings_not_null(non-existent-setting))
    );
  }

  @include it('get functions can use default values') {
    @include assert-equal(
      settings(non-existent-setting, "default-value"),
      "default-value"
    );
    @include assert-equal(
      settings_not_null(non-existent-setting, "default-value"),
      "default-value"
    );
  }

  @include it('settings_not_null function errors on null values') {
    @include assert-true(
      is_error(settings_not_null(non-existent-setting, null))
    );
  }
}


@include describe('ValueSet Enum Type') {
  @include it('provides value NULLABLE') {
    @include assert-equal(
      enum('ValueSet:::NULLABLE'),
      'ENUM__ValueSet:::NULLABLE'
    );
    @include assert-equal(
      enum('ValueSet:::NOT_NULL'),
      'ENUM__ValueSet:::NOT_NULL'
    );
  }
  @include it('provides value NOT_NULL') {
    @include assert-equal(
      enum('ValueSet:::NOT_NULL'),
      'ENUM__ValueSet:::NOT_NULL'
    );
  }
  @include it('provides value GROUPED') {
    @include assert-equal(
      enum('ValueSet:::GROUPED'),
      'ENUM__ValueSet:::GROUPED'
    );
  }
}


@include describe('Error Enum Type') {
  @include it('provides value INDEX_ERROR') {
    @include assert-equal(
      enum('Error:::INDEX_ERROR'),
      'ENUM__Error:::INDEX_ERROR'
    );
  }
  @include it('provides value TYPE_ERROR') {
    @include assert-equal(
      enum('Error:::TYPE_ERROR'),
      'ENUM__Error:::TYPE_ERROR'
    );
  }
}


@include describe('Object Enum Type') {
  @include it('provides value NONE') {
    @include assert-equal(
      enum('Object:::NONE'),
      'ENUM__Object:::NONE'
    )
  }
}


@include describe('The null Function') {
  @include it('returns null') {
    @include assert-equal(
      null(),
      null
    );
  }
}


@include describe('The remove_value Function') {
  @include it('returns a copy of a list with the value removed') {
    @include assert-equal(
      remove_value(
        ("hello", "lovely", "world"),
        "lovely"
      ),
      ("hello", "world")
    );
  }
}



@include describe('The map_deep_has_key Function') {
  @include it('returns a values given a key path') {
    @include assert-true(
      map_deep_has_key((
        root: (
          key: (
            child: test-value
          )
        )
      ), root, key, child)
    );
  }
}


@include describe('The map_deep_get Function') {
  @include it('returns a values given a key path') {
    @include assert-equal(
      map_deep_get((
        root: (
          key: (
            child: test-value
          )
        )
      ), root, key, child),
      'test-value'
    );
  }
  @include it('errors when a value is not found') {
    @include assert-true(
      is_error(
        map_deep_get((
          root: (
            key: (
              child: test-value
            )
          )
        ), root, not-key, child)
      )
    );
  }
}


@include describe('The first Function') {
  @include it('returns the first item in a list') {
    @include assert-equal(
      first((3, 4, 6, 9, 12)),
      3
    );
  }
}


@include describe('The last Function') {
  @include it('returns the last item in a list') {
    @include assert-equal(
      last((3, 4, 6, 9, 12)),
      12
    );
  }
}


@include describe('The map_key_prefix_flatten Function') {  
  @include it('flattens map leaf entry with namespace of parent keys') {
    @include assert-equal(
      map_key_prefix_flatten(
        (
          rootkey: (
            key: (
              childkey: value
            )
          )
        )
      ),
      ('rootkey:::key:::childkey': value)
    );
  }

  @include it('can unwrap multiple keys on multiple levels') {
    @include assert-equal(
      map_key_prefix_flatten(
        (
          rootkey: (
            key: (
              childkey: value,
              childkey2: value2
            ),
            key2: (
              childkey: value3,
              childkey2: value4
            )
          )
        )
      ),
      (
        'rootkey:::key:::childkey': value,
        'rootkey:::key:::childkey2': value2,
        'rootkey:::key2:::childkey': value3,
        'rootkey:::key2:::childkey2': value4
      )
    );
  }
}

$test_note_space: (
  _components: (
    (
      _name: 'container',
      _subselector: '.note',
      _properties: (
        color: enum('ValueSet:::NOT_NULL'),
        background: enum('ValueSet:::NULLABLE'),
        width: enum('ValueSet:::NULLABLE'),
        height: 200px,
        border-color: enum('ValueSet:::NULLABLE')
      ),
    ),
    (
      _name: 'title',
      _subselector: '.note > .title',
      _properties: (
        font-size: 2rem,
        border-color: enum('ValueSet:::NULLABLE'),
      ),
    ),
  )
);

$test_not_real_subspace-first: (
  container: (
    color: enum('ValueSet:::NULLABLE'),
  ),
);

$test_not_real_subspace-second: (
  title: (
    font-size: 5rem,
  ),
);

$test_not_real_subspace-third: (
  container: (
    line-height: enum('ValueSet:::NOT_NULL'),
  ),
);

$test_subspace: (
  container: (
    color: blue,
    background: enum('ValueSet:::NOT_NULL')
  )
);

$test_subspace_with_default: (
  container: (
    color: blue,
    background: (enum('ValueSet:::NOT_NULL'), orange)
  )
);

$test_subspace_with_groups: (
  _groups: (
    note-border-color: enum('ValueSet:::NOT_NULL')
  ),
  container: (
    color: blue,
    border-color: (enum('ValueSet:::GROUPED'), note-border-color)
  ),
  title: (
    border-color: (enum('ValueSet:::GROUPED'), note-border-color)
  )
);

@function test_add_ChapterNote_context() {
  @return ('ChapterNote:::_selectors': ('.chapter > ',));
}

@function test_note_dual_context() {
  @return (
    ChapterNote: (
      _selectors: ('.chapter > ', '.appendix > .special'),
      container: (
        background: yellow
      )
    )
  );
}

@function test_note_color_line_height() {
  @return (
    ChapterNote: (
      _selectors: ('.chapter > ', '.appendix > .special'),
      container: (
        color: yellow,
        line-height: 1.3rem
      )
    )
  );
}

@function test_note_grouped() {
  @return (
    ChapterNote: (
      _selectors: ('.chapter > ', '.appendix > .special'),
      note-border-color: lightgrey
    )
  );
}

@include describe("Design Space") {
  @include it('can create and find a superspace') {
    @include scoped_create_superspace('TestNote', $test_note_space) {
      @include assert-true(space_exists('TestNote'));
    }
  }

  @include it('can create a superspace only within a scope') {
    @include scoped_create_superspace('TestNote', $test_note_space) {}
    @include assert-false(space_exists('TestNote'));
  }
  
  @include it('can create and find a subspace') {
    @include scoped_create_superspace('TestNote', $test_note_space) {
      @include scoped_create_subspace('SpecificTestNote', 'TestNote', $test_subspace) {
        @include assert-true(space_exists('SpecificTestNote'));
      }
    }
  }

  @include it('can query a subspace for its root information') {
    @include scoped_create_superspace('TestNote', $test_note_space) {
      @include scoped_create_subspace('SpecificTestNote', 'TestNote', $test_subspace) {
        @include assert-equal(
          get_root_name('SpecificTestNote'),
          'TestNote'
        );
        @include assert-equal(
          get_root_subselector('SpecificTestNote', 'title'),
          '.note > .title'
        );
      }
    }
  }

  @include it('will error when required context is missing') {
    @include scoped_create_superspace('TestNote', $test_note_space) {
      @include assert {
        @include output {
          @include use('ChapterNote','TestNote');
        } @include expect {
          ERROR: "Unknown setting `ChapterNote:::_selectors`."
        }
      }
      
    }
  }

  @include it('will error when required setting is missing') {
    @include scoped_add_settings_functions(get-function('test_add_ChapterNote_context')) {
      @include scoped_create_superspace('TestNote', $test_note_space) {
        @include assert {
          @include output {
            @include use('ChapterNote','TestNote');
          } @include contains {
            .chapter > .note {
              ERROR: "Unknown setting `ChapterNote:::container:::color`.";
            }
          }
        }
      }
    }

    @include it('will error when required setting is missing - subspace') {
      @include scoped_add_settings_functions(get-function('test_add_ChapterNote_context')) {
        @include scoped_create_superspace('TestNote', $test_note_space) {
          @include scoped_create_subspace('SpecificTestNote', 'TestNote', $test_subspace) {
            @include assert {
              @include output {
                @include use('ChapterNote','SpecificTestNote');
              } @include contains {
                .chapter > .note {
                  ERROR: "Unknown setting `ChapterNote:::container:::background`.";
                }
              }
            }
          }
        }
      }
    }
  }

  @include it('allows use of the same subspace with different settings') {
    @include scoped_add_settings_functions(get-function('test_note_dual_context')) {
      @include scoped_create_superspace('TestNote', $test_note_space) {
        @include scoped_create_subspace('SpecificTestNote', 'TestNote', $test_subspace) {
          @include assert {
            @include output {
              @include use('ChapterNote','SpecificTestNote');
            } @include contains {
              .chapter > .note {
                color: blue;
                background: yellow;
                height: 200px;
              }
            }
          }
        }
      }
    }
  }

  @include it('allows ValueSets to include a default value if setting is missing') {
    @include scoped_add_settings_functions(get-function('test_add_ChapterNote_context')) {
      @include scoped_create_superspace('TestNote', $test_note_space) {
        @include scoped_create_subspace('SpecificTestNote', 'TestNote', $test_subspace_with_default) {
          @include assert {
            @include output {
              @include use('ChapterNote','SpecificTestNote');
            } @include contains {
              .chapter > .note {
                color: blue;
                background: orange;
                height: 200px;
              }
            }
          }
        }
      }
    }
  }

  @include it('setting groups for a space') {
    @include scoped_add_settings_functions(get-function('test_note_grouped')) {
      @include scoped_create_superspace('TestNote', $test_note_space) {
        @include scoped_create_subspace('SpecificTestNote', 'TestNote', $test_subspace_with_groups) {
          @include assert {
            @include output {
              @include use('ChapterNote','SpecificTestNote');
            } @include contains {
              .chapter > .note {
                color: blue;
                height: 200px;
                border-color: lightgrey;
              }
            }
          }
        }
      }
    }
  }

  @include it('forbids subspaces from being more general') {
    @include scoped_add_settings_functions(get-function('test_add_ChapterNote_context')) {
      @include scoped_create_superspace('TestNote', $test_note_space) {
        @include scoped_create_subspace('SpecificTestNote', 'TestNote', $test_not_real_subspace-first) {
          @include assert {
            @include output {
              @include use('ChapterNote','SpecificTestNote');
            } @include contains {
              .chapter > .note {
                ERROR: "Space `TestNote` is not a proper superspace due to `ChapterNote:::container:::color`.";
              }
            }
          }
        }
        @include scoped_create_subspace('SpecificTestNote', 'TestNote', $test_not_real_subspace-second) {
          @include assert {
            @include output {
              @include use('ChapterNote','SpecificTestNote');
            } @include contains {
              .chapter > .note > .title {
                ERROR: "Space `TestNote` is not a proper superspace due to `ChapterNote:::title:::font-size`.";
              }
            }
          }
        }
        @include scoped_add_settings_functions(get-function('test_note_color_line_height')) {
          @include scoped_create_subspace('SpecificTestNote', 'TestNote', $test_not_real_subspace-third) {
            @include assert {
              @include output {
                @include use('ChapterNote','SpecificTestNote');
              } @include contains {
                .chapter > .note {
                  ERROR: "Space `SpecificTestNote` is not a proper subspace due to addition of property `line-height`.";
                }
              }
            }
          }
        }
      }
    }
  }
  

  @include it('can debug output of all parents of a subspace') {
    @include scoped_add_settings_functions(get-function('test_note_grouped')) {
      @include scoped_create_superspace('TestNote', $test_note_space) {
        @include scoped_create_subspace('SpecificTestNote', 'TestNote', $test_subspace_with_groups) {
          @include assert-equal(
            get_lineage('SpecificTestNote'),
            ('SpecificTestNote', 'TestNote')
          );
        }
      }
    }
  }
}