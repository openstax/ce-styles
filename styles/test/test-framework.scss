$IS_FRAMEWORK_IMPORTED: false;
$IS_TEST: true;
$DEBUG: true;

@import "true";
@import "framework";

@include describe('Framework') {
  @include it('is successfully imported') {
    @include assert-true($IS_FRAMEWORK_IMPORTED);
  }
}


@include describe('Errors') {
  @include it('can error in a mixin') {
    @include assert {
      @include output {
        @include error("Explode.")
      } @include expect {
        ERROR: "Explode.";
      }
    }
  }

  @include it('can error in a function') {
    @include assert {
      @include output {
        test: error("Explode.");
      } @include expect {
        test: "ERROR: Explode.";
      }
    }
  }
}


@include describe('Enum Utility') {
  @include it('allows enum creation') {
    @include scoped_create_enum_type('Test',
        'TEST',
        'ENUM'
    ) {
      @include assert-equal(
        enum('Test:::TEST'),
        'ENUM__Test:::TEST'        
      );
      @include assert-equal(
        enum('Test:::ENUM'),
        'ENUM__Test:::ENUM'
      );
    }
  }

  @include it('errors when getting a non-existent enum') {
    @include assert-equal(
      enum('Null:::NULL'),
      "ERROR: Enum `Null:::NULL` does not exist."
    );
  }
}


@function test_add_settings_function() {
  @return (my-setting: test-value);
}

@function test_add_other_settings_function() {
  @return (my-other-setting: other-test-value);
}

@function test_add_settings_function_after() {
  @return (my-setting: overriden-value);
}

@function test_settings_key_prefix_flatten() {
  @return (
    rootkey: (
      key: (
        childkey: my-prefixed-value
      )
    )
  );
}

@include describe('Settings') {
  @include it('can be added via map-returning functions') {
    @include scoped_add_settings_functions(get-function('test_add_settings_function')) {
      @include assert-equal(
        settings(my-setting),
        'test-value'
      );
    }
  }

  @include it('can add settings functions only to a certain scope if desired') {
    @include scoped_add_settings_functions(
      get-function('test_add_settings_function')
    ) {}
    @include assert-unequal(
      settings(my-setting),
      'test-value'
    );
  }

  @include it('can access the settings with keys flattened') {
    @include scoped_add_settings_functions(
      get-function('test_settings_key_prefix_flatten')
    ) {
      @include assert-equal(
        settings('rootkey:::key:::childkey'),
        'my-prefixed-value'
      )
    }
  }

  @include it('can clear and output unused settings values') {
    $_: settings(my-setting);
    @include clear_used_settings();
    @include scoped_add_settings_functions(
      get-function('test_add_other_settings_function'),
      get-function('test_add_settings_function')
    ) {
      $_: settings(my-other-setting);
      @include assert-equal(
        get_unused_settings(),
        ((my-setting, test-value),)
      );
    }
  }

  @include it('prioritize settings functions added later (front of manifest)') {
    @include scoped_add_settings_functions(get-function('test_add_settings_function')) {
      @include scoped_add_settings_functions(get-function('test_add_settings_function_after')) {
        @include assert-equal(
          settings(my-setting),
          'overriden-value'
        );
      }
    }
    @include scoped_add_settings_functions(
      get-function('test_add_settings_function_after'),
      get-function('test_add_settings_function')
    ) {
      @include assert-equal(
        settings(my-setting),
        'overriden-value'
      );
    }
  }

  @include it('get functions error on non-existent key') {
    @include assert-equal(
      settings(non-existent-setting),
      "ERROR: Unknown setting `non-existent-setting`."
    );
    @include assert-equal(
      settings_not_null(non-existent-setting),
      "ERROR: Unknown setting `non-existent-setting`."
    );
  }

  @include it('get functions can use default values') {
    @include assert-equal(
      settings(non-existent-setting, "default-value"),
      "default-value"
    );
    @include assert-equal(
      settings_not_null(non-existent-setting, "default-value"),
      "default-value"
    );
  }

  @include it('settings_not_null function errors on null values') {
    @include assert-equal(
      settings_not_null(non-existent-setting, null),
      "ERROR: Received a disallowed NULL value for setting `non-existent-setting`."
    );
  }
}


@include describe('ValueSet Enum Type') {
  @include it('provides values NULLABLE and NOT_NULL') {
    @include assert-equal(
      enum('ValueSet:::NULLABLE'),
      'ENUM__ValueSet:::NULLABLE'
    );
    @include assert-equal(
      enum('ValueSet:::NOT_NULL'),
      'ENUM__ValueSet:::NOT_NULL'
    );
  }
}


@include describe('Argument Enum Type') {
  @include it('provides value NONE') {
    @include assert-equal(
      enum('Argument:::NONE'),
      'ENUM__Argument:::NONE'
    )
  }
}


@include describe('The null Function') {
  @include it('returns null') {
    @include assert-equal(
      null(),
      null
    );
  }
}


@include describe('The remove_value Function') {
  @include it('returns a copy of a list with the value removed') {
    @include assert-equal(
      remove_value(
        ("hello", "lovely", "world"),
        "lovely"
      ),
      ("hello", "world")
    );
  }
}


@include describe('The map_key_prefix_flatten Function') {  
  @include it('flattens map leaf entry with namespace of parent keys') {
    @include assert-equal(
      map_key_prefix_flatten(
        (
          rootkey: (
            key: (
              childkey: value
            )
          )
        )
      ),
      ('rootkey:::key:::childkey': value)
    );
  }

  @include it('can unwrap multiple keys on multiple levels') {
    @include assert-equal(
      map_key_prefix_flatten(
        (
          rootkey: (
            key: (
              childkey: value,
              childkey2: value2
            ),
            key2: (
              childkey: value3,
              childkey2: value4
            )
          )
        )
      ),
      (
        'rootkey:::key:::childkey': value,
        'rootkey:::key:::childkey2': value2,
        'rootkey:::key2:::childkey': value3,
        'rootkey:::key2:::childkey2': value4
      )
    );
  }
}


@include describe("Design Space") {
  @include it('can create a superspace') {
    
  }
  
  @include it('')
}