$FRAMEWORK_SETTINGS_MANIFEST_GLOBAL: ();
$FRAMEWORK_USED_SETTINGS: ();

@mixin debug_settings_manifest() {
  @debug "Settings manifest =>";
  @each $function in $FRAMEWORK_SETTINGS_MANIFEST_GLOBAL {
    @debug $function;
  }
}

@mixin debug_settings() {
  @debug "All available settings =>";
  @each $function in $FRAMEWORK_SETTINGS_MANIFEST_GLOBAL {
    @each $key, $value in map_key_prefix_flatten(call($function)) {
      @debug "#{$key} : #{$value}";
    }
  }
}

@mixin clear_used_settings() {
  $FRAMEWORK_USED_SETTINGS: () !global;
}

@function get_unused_settings() {
  $unused_entries: ();
  @each $function in $FRAMEWORK_SETTINGS_MANIFEST_GLOBAL {
    @each $key, $value in map_key_prefix_flatten(call($function)) {
      @if index($FRAMEWORK_USED_SETTINGS, $key) == null {
        $unused_entries: append($unused_entries, ($key, $value), comma);
      }
    }
  }
  @return $unused_entries;
}

@mixin add_settings_functions($functions...) {
  $FRAMEWORK_SETTINGS_MANIFEST_GLOBAL: join($functions, $FRAMEWORK_SETTINGS_MANIFEST_GLOBAL) !global;
}

@mixin remove_settings_functions($functions...) {
  @each $function in $functions {
    $FRAMEWORK_SETTINGS_MANIFEST_GLOBAL: remove_value($FRAMEWORK_SETTINGS_MANIFEST_GLOBAL, $function) !global;
  }
}

@mixin scoped_add_settings_functions($functions...) {
  @include add_settings_functions($functions...);
  @content;
  @include remove_settings_functions($functions...);
}

@function settings($name, $default: enum('Argument:::NONE')) {
  @each $function in $FRAMEWORK_SETTINGS_MANIFEST_GLOBAL {
    $function_settings: map_key_prefix_flatten(call($function));
    @if map-has-key($function_settings, $name) {
      $FRAMEWORK_USED_SETTINGS: append($FRAMEWORK_USED_SETTINGS, $name) !global;
      @return map-get($function_settings, $name);
    }
  }
  @if $default != enum('Argument:::NONE') {
    @return $default;
  }
  @return error("Unknown setting `#{$name}`.");
}

@function settings_not_null($name, $default: enum('Argument:::NONE')) {
  $settings-result: settings($name, $default);
  @if $settings-result != null {
    @return $settings-result;
  }
  @return error("Received a disallowed NULL value for setting `#{$name}`.");
}
