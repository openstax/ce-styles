@function image-set() {
  @return config(image-set);
}

@function image($image_name) {
  @if not rb_resource_exists('images/#{$image_set}') {
    @error 'Image-set `#{$image_set}` does not exist.';
  }
  @if not rb_resource_exists('images/#{$image_set}/#{$image_name}') {
    @error 'Image `#{$image_name}` does not exist.';
  }
  @return 'url(../images/#{$image_set}/#{$image_name})';
}

// Select the path to the resources (theme or book level)
@function selectPath($pathLevel) {
  $book: settings(book);
  $theme: settings(theme-name);

  @if $pathLevel == book {
    $pathLevel: '../books/#{$book}';
  }
  @else if $pathLevel == theme {
    $pathLevel: '../themes/#{$theme}';
  }
  @else {
    @error 'There are no images located at #{$pathLevel}, choose between theme or book';
  }
  @return $pathLevel;
}

//combine path and resource type to output full resource path
@function resource($path, $imageName, $type) {
  $pathImageName: '';
  $path: '#{selectPath($path)}/images';
  @if $type == svg {
    $pathImageName:'#{$path}/#{$imageName}.svg';
  }
  @else if $type == png {
    $pathImageName:'#{$path}/#{$imageName}.png';
  }
  @else if $type == jpg {
    $pathImageName:'#{$path}/#{$imageName}.jpg';
  }
  @else {
    @error '#{$type} is not a proper image type (svg, png, jpg)';
  }
  @return $pathImageName;
}


@function nested-map-get($map, $keys...) {
  @each $key in $keys {
    $map: map-get($map, $key);
  }
  @return $map;
}


@function reverse($list, $recursive: false) {
  $result: ();
  @for $i from length($list) *-1 through -1 {
    @if type-of(nth($list, abs($i))) == list and $recursive {
      $result: append($result, reverse(nth($list, abs($i)), $recursive));
    } @else {
      $result: append($result, nth($list, abs($i)));
    }
  }
  @return $result;
}


//returns 0 1 2 3 4
//this allows to convert the header into an integer that can be used to set size-scale(#) based on the header level
@function index-header-size($type) {
  $headers: SUPPORTED_HEADERS();
  $headerIndex: index($headers, $type)  - 1; //make the list index
  @return $headerIndex;
}

//reverses the order of $headers: h5 h4 h3 h2 h1 to h1 h2 h3 h4 h5
//returns 1 2 3 4 5
@function index-bookmark-level($type) {
  $headers: SUPPORTED_HEADERS();
  $reverseHeaders:  reverse($headers);
  $reverseHeaderIndex: index($reverseHeaders, #{$type});
  @return $reverseHeaderIndex;
}
